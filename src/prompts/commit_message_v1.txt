프로젝트의 기여가이드와 다음 내용을 기반으로 커밋 메시지를 작성해주세요.

이 프롬프트는 시작시 자동으로 다음 순서대로 명령어를 실행합니다:

### 1. 스테이징된 변경사항 확인 및 분석
- git --no-pager status 명령을 실행해 스테이징 상태 확인
- git --no-pager diff --staged --name-status 명령으로 스테이징된 파일 리스트와 상태(추가/수정/삭제) 확인
- git --no-pager diff --staged 명령으로 스테이징된 변경사항의 실제 내용 확인

### 2. 스테이징 상태 처리
- "Changes to be committed"가 없으면: 스테이징된 변경사항이 없다고 응답하고 프로세스를 중단합니다.
- 스테이징된 변경사항이 있으면: 위에서 얻은 변경사항만을 기반으로 커밋 메시지를 생성합니다.
- 작업 트리에 있지만 스테이징되지 않은 변경사항은 무시합니다.

### 3. 스테이징된 파일 분석
- 파일 변경 유형(A: 추가, M: 수정, D: 삭제, R: 이름변경)에 따라 분류
- 파일의 경로와 이름을 분석해 관련 기능/컴포넌트/영역을 파악
- 변경된 코드의 주요 내용과 목적 분석 (함수 추가/수정, 스타일 변경, 리팩토링 등)
- 변경사항을 사용자에게 간략히 요약하여 제시

### 4. 브랜치 정보 활용 (선택적)
- git --no-pager branch --show-current 명령으로 현재 브랜치 이름 확인
- 브랜치명에서 이슈 번호 추출 (예: feature/ABC-123 → ABC-123)

### 5. 커밋 메시지 생성
- 변경 내용 분석을 바탕으로 적절한 커밋 타입(feat, fix, docs, style, refactor, chore 등) 선택
- 필요시 영향 범위(scope)를 포함 (예: feat(auth): ...)
- 핵심 내용을 담은 제목 작성 (50자 이내, 명령형 현재시제)
- 필요한 경우 본문 작성 (각 줄 72자 이내)
- 관련 이슈가 있는 경우 푸터에 참조 추가 (예: Closes #123)

### 6. 커밋 메시지 스타일 가이드

#### 1. 간단한 변경사항인 경우
- 의존성 업데이트, 오타 수정, 단순 스타일 변경
- 코드 리팩토링(로직 변경 없는)
- 문서 수정(단순 업데이트)

예시:
```
chore(deps): 의존성 패키지 업데이트

package-a v1.2.3 → v1.3.0
package-b v2.0.0 → v2.1.0
```


#### 2. 중요하거나 복잡한 변경사항인 경우
- 아키텍처 변경
- 새로운 기능 추가
- API 변경
- 성능 최적화

예시:
```
feat(auth): 소셜 로그인 기능 구현

사용자가 카카오와 애플 계정으로 로그인할 수 있는 기능을 추가합니다.

shared/api/auth에 소셜 로그인 API 연동 추가
features/auth에 소셜 로그인 컴포넌트 구현
토큰 관리 및 저장 로직 구현
인증 상태는 전역 상태로 관리하며, 새로고침 시에도 유지됩니다. Closes #45
```